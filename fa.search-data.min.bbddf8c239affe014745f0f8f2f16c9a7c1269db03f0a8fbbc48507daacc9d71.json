[{"id":0,"href":"/fa/docs/measure-internet-censorship/","title":"بررسی سانسور اینترنت: مقدمه","section":"Docs","content":"بررسی سانسور اینترنت #  مقدمه #  امروزه اینترنت بخش مهم زندگی اکثر مردم جهان شده است. و برای بعضی از افراد، همچون هوا، ضروری است. به حدی که به عنوان حقوق اولیه ی هر انسانی به شمار می آید. اما در بعضی کشورها همچون ایران، حقوق مردم در هر سمت مورد تعرض قرار می گیرد. سرویس های مهم خارجی که بخش اصلی منابع مهم دنیا و تکنولوژی ها را در دست دارند، دسترسی ایرانی ها را محدود و یا مسدود کرده اند. سیستم سانسور جمهوری اسلامی هم، همراه با این محدودیت ها عمل کرده و برخی از این سرویس ها را برای مردم محدود و یا مسدود کرده است؛ به طریقی که سرویسی مانند «شکن» هم نمی تواند برای دور زدن این تحریم ها کاری انجام دهد. و یا اینکه سیستم سانسور جمهوری اسلامی، دائما در حال شناسایی و مسدود کردن سرور های پراکسی و VPN است که بخشی مهمی از آن برای دور زدن تحریم ها به کار گرفته می شود. اخیرا سیستم سانسور جمهوری اسلامی عملی انجام داده که به صورت پیشفرض امکان ارتباط HTTPS به سمت خیلی از سرویس های خارجی وجود نداشته باشد. به عبارتی تمام سرویس های خارجی که طبق استاندارد جهانی هستند اما طبق علاقه ی سیستم سانسور جمهوری اسلامی نیستند، محکوم به نابودی شدند. مانند تمام برنامه هایی که با زبان Go نوشته شده و در موبایل به کار گرفته می شوند و یا تمام ارتباطاتی که با ElectronJS نوشته شدند و تمایل به ارتباط با سرور های AWS آمازون و یا گیتهاب دارند. همچنین در بخش هایی نشان داده می شود که چطور سیستم سانسور جمهوری اسلامی به صورت random در ارتباطات اختلال ایجاد می کند.\nطبق آخرین تحقیقاتی که OONI انجام داده، می توان به یک نتیجه ای رسید که روش کار در بین خیلی از این حکومت های تمامیت خواه یکسان است. به عنوان مثال شیوه ای از اختلال موقتی در سرویس ها در ایران، قزاقستان و اوگاندا یکسان است و تقریبا از یک بازه ی زمانی شروع شده است.\nدر این شرایط بسیار سخت است تا متوجه شویم که ایراداتی که در ارتباطمان وجود دارد، از کجا نشات می گیرند. به همین دلیل تصمیم شروع نوشتن در این مورد کردم.\nتعاریف واژه ها و اصطلاحات #  ابتدا چند تعریف انجام می شود که ممکن است بین همه مشترک نباشد اما از آنها استفاده خواهیم کرد که توضیحات کمتر شوند.\nشخص ناشناس #  به تمام دستگاه ها و افرادی که بین دستگاه شما و سرور نهایی قرار میگیرند، اعم از مسئول شبکه ی ارائه دهنده ی خدمات اینترنت شما، دستگاه های سانسور، هکر یا بدافزار احتمالی در شبکه، سرور پراکسی و یا VPN، مسئول شبکه ی ارائه دهنده ی خدمات اینترنت سرور، را شخص ناشناس می گوییم. این شخص میتواند فقط نظارت داشته باشد و یا در شبکه و packet ها دستکاری انجام دهد و یا اطلاعاتی را سرقت کند.\n  (با کمی تغییرات از طرح اصلی سازمان EFF)\n سیاهچاله #   null route یا black hole route روشی است که packet ها توسط سیستم سانسور دور ریخته می شوند و به طریقی که درخواست کلاینت و یا درخواست سرور به یکدیگر نمی رسد را سیاه چاله می گوییم.\nدر این حالت ارتباط در حالت بلاتکلیفی می ماند و سیستم عامل کلاینت و یا سرور و یا هر دو، مدام retransmission انجام می دهند اما جوابی دریافت نمی کنند.\n  (طراحی شده با draw.io)\n به جای این کار سیستم سانسور می تواند packet ای با Flag ای شامل RST ارسال کند و یا RST را در packet ای که از سمت سرور ارسال می شود تزریق کند اما این کار را نمی کند. این روش دو سود برای سیستم سانسور دارد: اول اینکه زمان بیشتری از کاربران اینترنت هدر می دهد و کاربران را بیشتر منتظر می گذارد. دوم اینکه این سانسور بالاتر از سطح ISP انجام می شود و این retransmission ها که معمولا packet ای با حجم قابل توجه ای هستند، در تعداد زیاد و مداوم، برای ISP ها سودآور خواهند بود. هر دو از نظر اخلاقی، همانند وضع سانسور فعلی، درست نیستند، اما متاسفانه واقعیت دارند.\nسیستم سانسور جمهوری اسلامی #  سیستم سانسورِ حاضر در اینترنت ایران، به نام سیستم سانسور جمهوری اسلامی بیان شده. به دلیل اینکه تمام مردم ایران برای رد شدن از آن هزینه می کنند، اما تمام سازمان های وابسته به جمهوری اسلامی در توسعه و تداوم آن مشارکت دارند. در نتیجه این سیستم سانسور «ایران» نیست و حتی «برای مردم ایران» نیست بلکه «بر ضد مردم ایران» است. حتی طبق داده های یکی از VPN های معروف که به صورت جهانی سرویس ارائه می دهد، حدود 400 هزار نفر روزه داران ایرانی که امسال (1400) برای سحر بیدار می شدند و از این VPN استفاده می کردند، بعد از وصل شدن به اینترنت، این VPN را نیز فعال می کردند.\n   با توجه به این مسئله که این آمار فقط مربوط به یک VPN از بسیار فیلترشکن موجود است، به وضوح نشان می دهد که اکثریت مردم مذهبی و غیرمذهبی ایران، با سانسور اینترنت مخالف هستند.\nنکات #  اکثر دستورات در لینوکس استفاده شدند. اما معادل هایی برای ویندوز نیز در صورت وجود معرفی شده است.\nتوجه: اگر در شبکه های اجتماعی به صورت ناشناس فعالیت می کنید، نتیجه ی بعضی از این آزمایشات ممکن است موجب افشا شدن هویت واقعی شما شود. همچنین در سانسور مشخصات یکتای خود کوشا باشید. امنیت سایبری شما و اطرافیانتان به آنها بستگی دارد.\n"},{"id":1,"href":"/fa/docs/measure-internet-censorship/OONI/","title":"بررسی سانسور اینترنت از طریق کاوشگر OONI","section":"بررسی سانسور اینترنت: مقدمه","content":"بررسی سانسور اینترنت از طریق کاوشگر OONI #     OONI و یا Open Observatory of Network Interference، ترجمه شده به فارسی: «رصد خانه آزاد دخالت در شبکه»، یک پروژه ی نرم افزاری متن باز و آزاد با هدف توانمند سازی تلاش های غیرمتمرکز در افزایش شفافیت سانسور اینترنت در سراسر جهان است. OONI یک سَمَن یا سازمان غیردولتی است که توسط پروژه ی Tor راه اندازی شد و اکنون به صورت نیمه مستقل فعالیت می کند. این پروژه با ایجاد نرم افزارهایی برای سیستم عامل های مختلف این امکان را فراهم می کند که یک شخص بدون نیاز به دانش فنی، فقط با اجرا کردن تست ها، شواهدی معتبر از سانسور تهیه کند.\n  \n  به صورت پیشفرض این اطلاعات با حفظ حریم خصوصی کاربران، برای سرور OONI ارسال می شوند. اطلاعات دریافتی در سرور دوباره پردازش می شوند و در اکثر مواقع در کمتر از یک دقیقه در بخشی به نام Explorer تحت وب در دسترس همگان خواهد بود.\n   از سال 2012 تاکنون از بیش از 200 کشور نتایج اندازه گیری دریافت کرده.\nچگونگی کارکرد تست Websites #  در Probe های OONI بخشی به نام Websites وجود دارد که در حال حاضر می تواند آدرس های http:// و https:// را مورد آزمایش قرار دهد. این تست که با اسم Web connectivity شناخته می شود به این صورت کار می کند که ابتدا یک بار آدرس درخواستی را از طریق backend خود مورد آزمایش قرار می دهد تا از فعال بودن آن اطمینان حاصل کند و همچنین جواب DNS و محتوای دریافتی در backend را با DNS و محتوای دریافتی در شبکه ی مورد تست مقایسه کند. به این معنی که اگر پاسخ تست ای، Anomaly و یا Confirmed بوده است، تست در backend و خارج از شبکه در همان لحظه با موفقیت انجام شده است. این مسئله صحت نتیجه در مورد وجود سانسور را تضمین می کند.\nبه صورت پیشفرض این تست از لیست آدرس هایی استفاده می کند که توسط CitizenLab ساخته شده و هر کسی میتواند در بهبود آن مشارکت داشته باشد. در هر کشور دو لیست مورد استفاده قرار میگیرد که یک لیست اختصاصی آن کشور و یک لیست جهانی است. در زمان نوشتن این مقاله این دو لیست شامل 2242 آدرس است.\nباید توجه داشته باشید که این لیست سایت هایی نیست که احتمال سانسور شدن آنها زیاد است. می توان گفت که این لیست ای از سرویس های پر استفاده است. اما نه لیست ای که توسط سرویس هایی مانند Alexa معرفی می شود، چون در بسیاری از کشور ها، مردم از ابزار های حفظ حریم خصوصی همانند VPN ها استفاده می کنند و یا در کشورهایی مثل ایران، اکثر سرویس های پراستفاده ی مردم، مسدود یا تحریم هستند و کاربر نمی تواند به صورت مستقیم به آنها دسترسی پیدا کند.\nتست های پیشفرض در این بخش، به صورت پیشفرض فقط 90 ثانیه اجرا می شوند که از بخش تنظیمات این مقدار قابل تغییر است.\nمقدار 0 برابر با انجام اندازه گیری تمام آدرس های لیست پیشفرض است.\nالبته این امکان وجود دارد تا آدرس ها و یا آدرس های سفارشی خودتان را نیز بدون نیاز به ثبت در لیست پیشفرض در شبکه ی خود و یا دوستانتان تست کنید. برای این کار دو روش وجود دارد:\n وارد کردن مستقیم لیست در اپ ها ایجاد لیست تست سفارشی  وارد کردن مستقیم آدرس های سفارشی در نرم افزار #  برای انجام این کار به صورت درون برنامه ای، وارد بخش Websites شوید و بر روی دکمه ی Choose websites و یا «انتخاب وبسایت ها» کلیک کنید :\n  \n  آدرس های مورد نظر خود را وارد کنید. و در انتها دکمه ی Run در پایین صفحه را بزنید.   \n  و در انتها بر روی دکمه ی Run و یا اجرا کلیک کنید تا اندازه گیری آغاز شود.\nدر نسخه ی cli، به این صورت می توان انجام داد: اگر تابحال اجرا نکردید، کی بار مراحل و شرایط استفاده را بخوانید و در صورت موافقت تایید کنید:\n\u0026gt; .\\ooniprobe.exe\n سپس لیست انتخابی خود را به این صورت اجرا کنید:\n\u0026gt; .\\ooniprobe.exe run websites --input=https://yahoo.com/ --input=https://yimg.com/\n    در این حالت نتیجه ی هر تست و تفاوت ها به صورت لحظه ای نشان داده می شود.\nایجاد لیست تست سفارشی #  برای اینکه یک لیست سفارشی داشته باشید که بتوانید با دیگران به اشتراک بگذارید، می توانید به این آدرس رجوع کرده: https://run.ooni.io/\n   بعد از اضافه کردن آدرس های دلخواه از طریق دکمه ی Add URL دکمه ی Generate را بزنید.\n   آدرس داده شده را کپی کرده و از طریق شبکه های اجتماعی برای دیگران بفرستید.\n   کاربران در موبایل می توانند فقط با زدن بر روی لینک، اپ OONI Probe را انتخاب کرده:\n   و با زدن دکمه ی Run اندازه گیری را شروع کنند.\n   آنالیز نتایج #  آنالیز نتایج OONI بسیار ساده و آسان است. شما نیاز به داشتن دانش فنی برای درک وجود سانسور یا نبود آن ندارید. به عنوان مثال در این تصویر:\n   از 7 مورد آزمایش شده، دو مورد را با اطمینان می توان گفت که ارتباطشان به دلیلی در آن لحظه مسدود شده است و چهار مورد در دسترس بودند.\nهمچنین یک مورد با رنگ خاکستری است که سه دلیل شایع می تواند داشته باشد: غیرفعال بودن سایت اصلی قطع شدن لحظه ای ارتباط در زمان انجام آن تست وجود باگ یا ناتوانی در تحلیل.\nتوضیحات آن نیز به این صورت است که علاوه بر مشاهده ی توضیحات بیشتر می توانید با زدن بر روی دکمه ی Try Again، دوباره اقدام به تست آن یک آدرس کنید:\n   آنالیز ساده ی نتایج #  برای بررسی دقیقتر، در توضیحات هر نتیجه، دلیل آنها بیان شده است. چند مورد را که ممکن است بیشتر با آنها مواجه شوید در ادامه توضیح داده خواهد شد.\nHTTP blocking (a blockpage might be served) #     در این تست احتمال می رود که ممکن است صفحه ی مربوط به سانسور به جای صفحه ی اصلی دریافت شده است. این اتفاق فقط در ارتباط های غیر رمزنگاری شده و مخصوصا HTTP ممکن است. در این حالت چهار دلیل ممکن است: دریافت خطای 503، که خود نوعی سانسور است (در بخشی های بعدی توضیح داده خواهد شد) حساسیت به آدرس سایت در بخش Host ارتباط HTTP حساسیت به Request URI یا همان ادامه ی آدرس بعد از Hostname. (در این تست فقط / هست.) حساسیت به یک کلمه در آن سایت.\nDNS tampering #     در این تست احتمال می رود که یک IP ی جعلی دریافت شده است. در این حالت، از DNS مسدود شده است.\nTCP/IP based blocking #     در این تست عمل TCP Handshake انجام نشده. که ممکن است به دلیل وارد سیاهچاله شدن ارتباط باشد و یا ارسال packet های RST. در این حالت IP مسدود شده است.\nHTTP blocking (HTTP requests failed) #     در این تست TCP Hnadshake انجام شده است (IP مسدود نیست) اما بعد از آن ناموفق بوده است. این خطا ممکن است در هر دو ارتباط HTTP و HTTPS مشاهده شود.\nآنالیز پیشرفته ی نتایج #  برای آنالیز پیشرفته تر، در نرم افزار های OONI این امکان وجود دارد تا دیتای جمع آوری شده از هر تست را ببینید.\n   این دیتا از طریق آدرس اختصاصی Explorer نیز در دسترس است.\n   در این دیتا، اطلاعات کلی و جزئی هر اندازه گیری به صورت مجزا وجود دارد.\nتوضیح بعضی از بخش ها:\nprobe_ip #  مقدار probe_ip که برابر با IP کاربر است. برای حفظ حریم خصوصی، به صورت پیشفرض در سمت کلاینت به 127.0.0.1 تغییر داده می شود.\nresolver_ip #  مقدار resolver_ip برابر IP سرور ای است که کاربر احتمالا در این تست از آن استفاده کرده است. این مقدار با درخواست DNS مستقل به آدرس whoami.akamai.net محاسبه می شود. به صورت زیر:\n   test_keys #  دیتای اصلی هر تست، در بخش test_keys قرار دارد:\n   network_events #  بخش network_events شامل رویداد های ارتباطی مابین کلاینت و سرور است. ساده تر از چیزی که با capture کردن packet ها به دست می آوریم. برای اینکه ببینیم که مسدود شدن بعد از Client hello بوده است و یا بعد از TLS handshake.\n   tls_handshakes #  بخش tls_handshakes شامل certificate هایی است که در هر بار request از سرور دریافت می شود.\n   در صورت حمله ی MITM این دیتا بسیار مفید خواهد بود. و در صورت خطا در زمان TLS handshake، توضیح آن بیان می شود:\n   queries #  بخش queries شامل درخواست های DNS و جواب های دریافت شده می شود:\n   dns_consistency #  بخش dns_consistency مربوط می شود به یکسان بودن و یا نبودن جواب DNS در تست انجام شده در سرور OONI و در این شبکه ی فعلی در همان لحظه.\ncontrol #  بخش control مربوط می شود به تست های انجام شده در سرور OONI که همزمان صورت می گیرد.\n   tcp_connect #  بخش tcp_connect مربوط می شود به تست TCP handshake تمام IP هایی که از درخواست DNS به دست آمد.\n   requests #  بخش requests مربوط می شود به درخواست ها و جواب هایی که در سطح HTTP انجام می شوند.\n   در اینجا درخواست انجام نشده.    در اینجا جوابی با iframe از صفحه ی سیستم سانسور جمهوری اسلامی بازگردانده شده.\nبیشتر #  بخش های دیگر نیز نسبت به HTTP و یا HTTPS بودن ارتباط متفاوت است.\nدر اینجا نشان می دهد که تبادل HTTP در HTTPS به درستی انجام نشده است:\n   و یا مقادیر دو تست درون و بیرون شبکه در ارتباط HTTP یکسان نیست:\n   تشخیص تحریم #  یکی از سوال های مهم که در هر بار عدم دسترسی به سرویس ای یک ایرانی از خودش می پرسد این است که «آیا این سایت فیلتر شده و یا تحریم؟» برای پاسخ به این سوال نیز می توان از OONI کمک گرفت. چرا که علاوه بر اینکه موارد زیادی را آنالیز می کند، همزمان هم در شبکه ی فعلی و هم از طریق سرور backend، اتصال به آدرس مورد نظر را بررسی و مقایسه می کند.\nاگر آدرس وارد شده HTTPS باشد، به دلیل اینکه توسط شخص ناشناس قابل دستکاری نیست، نتیجه قابل اعتمادتر خواهد بود. در ادامه یک آدرسی را که به دلیل استفاده از کلاد گوگل در ایران قابل استفاده نیست را به صورت نمونه بررسی می کنیم.\n   در نتیجه ی آنالیز می بینیم که به رنگ سبز است و این یعنی مشکلی در ارتباط وجود ندارد.\n   در بخش Failure نیز می بینیم که تمام آنها null هستند و این یعنی هیچ دستکاری ای در شبکه انجام نشده است.\n   در بخش داده ها و در زیرمجموعه ی control می بنیم که مقدار عنوان درست است و همینطور کد دریافتی برابر با 200 است. که این یعنی سرور سایت به شبکه ای دیگر در خارج از کشور به درستی جواب می دهد.\n   اما در بخش requests کد دریافتی و همچنین response دارای مقدار متفاوتی است.\nکد 403 و گاهی کد 404 اگر در این شرایط گفته شده (ارتباط HTTPS و متفاوت با نتیجه ی خارج از کشور) باشد، به معنای تحریم است.\nهمچنین در انتهای بخش test_keys مقایسه هایی صورت میگیرد که نتیجه ی کلی از تمام موارد گفته شده در بالا را نشان می دهد.\n   ذکر این نکته مهم است که طی یک سال اخیر مورد ای از تحریم مشاهده نشده که بدون نمایش خطای 403 و یا 404 در ارتباط HTTPS از درخواست ها به دلیل تحریم جلوگیری کنند. در نتیجه اگر نتیجه غیر از سبز بود، احتمالا سایت به طریقی در شبکه ی شما سانسور شده است.\nتنظیم داخلی فیلترشکن فقط برای ارتباط با backend #  به دلیل سانسور های دسته ای سرویس ها در ایران و بدون در نظر گرفتن عواقب آن و زیر پا گذاشتن حق‌الناس توسط حکومتی که مدعی آن است، ارتباط با سرور OONI در موبایل، به دلیلی که در بخش «شناسایی مسدود شدن از طریق fingerprint» توضیح داده شد، امکان پذیر نیست.\n   برای حل این مشکل، تیم OONI دو تغییر مهم ایجاد کردند: تغییر TLS fingerprint برای تقلید fingerprint مرورگر اضافه کردن بخش Proxy برای ارتباط با backend\nبرای فعال کردن proxy، به بخش تنظیمات رفته و OONI backend Proxy را انتخاب می کنیم:\n   در این بخش (در زمان نوشتن این مقاله) سه گزینه ی اصلی داریم: از هیچ proxy ای استفاده نشود از Psiphon استفاده شود از یک Proxy شخصی استفاده شود. (در حال حاضر فقط SOCKS5)\n   تنظیماتی که در تصویر می بینید (127.0.0.1:9050) متعلق به SOCKS5 ای است که توسط Orbot ایجاد می شود.\n   توجه داشته باشید که برای استفاده از OONI، نباید حالت VPN فعال باشد. اگر از Tor Browser استفاده می کنید، port آن برای SOCKS5 برابر با 9150 است.\nبعد از فعال کردن یکی از این گزینه ها. ارتباط با backend توسط آن proxy صورت می گیرد اما تست ها از طریق خود شبکه:\n   در تصویر می بینید که ابتدا به Psiphon متصل می شود.\n   اما تست ها از طریق شبکه ی کاربر انجام می شود.\nداده کاوی در داده های نتایج OONI #  اگر قصد دارید که نتایج OONI را بیشتر از چیزی که در Explorer مشاهده می کنید، بررسی و آنالیز کنید، این امکان فراهم است تا بتوانید تمام داده ها را از سرویس عمومی S3 آمازون مخصوص OONI به صورت دسته بندی شده به تاریخ، کشور، نوع تست و ساعت دریافت کنید.\nبه عنوان مثال در ادامه، تمام نتایج مربوط به تست webconnectivity را از طریق ابزار aws cli دانلود می کنیم:\naws --no-sign-request s3 sync --exclude \u0026#39;*\u0026#39; --include \u0026#39;*/IR/webconnectivity/*.jsonl.gz\u0026#39; \u0026#39;s3://ooni-data-eu-fra/raw/\u0026#39; ./ooni-data-iran    حجم این نتایج برای هر روز متغیر است:\ndu -h --max-depth=0 ./ooni-data-iran/202106*  \n  و بیشترین اندازه را در روز می توان نزدیک به 150 مگابایت در نظر گرفت.\ndu -h --max-depth=1 ./ooni-data-iran | sort -hr \n  البته داده این داده ها فقط مربوط به تست webconnectivity بودند.\nبرای دانلود تمام نتایج، به عنوان مثال در روز 22 ماه May به این صورت عمل می کنیم:\naws --no-sign-request s3 sync --exclude \u0026#39;*\u0026#39; --include \u0026#39;*/IR/*.jsonl.gz\u0026#39; \u0026#39;s3://ooni-data-eu-fra/raw/20210522\u0026#39; ./ooni-data-iran    که کل حجم آن برابر است با 137 مگابایت.\n$ du -sch 137M . 137M total  این فایل ها با نسبت حدود 80٪ فشرده سازی شده اند.\n$ gzip -l * compressed uncompressed ratio uncompressed_name 2277712 12444162 81.7% ./2021052222_IR_webconnectivity.n0.0.jsonl  به عنوان مثال یک فایل حدود 2 مگابایتی، بعد از decompress کردن حدود 12 مگابایت فضا را اشغال خواهد کرد.\n$ ls -shi total 15M 1082 12M 2021052222_IR_webconnectivity.n0.0.jsonl 1071 2.2M 2021052222_IR_webconnectivity.n0.0.jsonl.gz  در این فایل ها، هر خط جدید شامل یک نتیجه ی مجزا می شود:\n  یک طرح ساده از مورد استفاده شده از داده های NDT ی OONI را می توانید در اینجا ببینید:\n   برای دریافت توضیحات بیشتر در این رابطه، می توانید متن OONI در مورد داده کاوی نتایج را مطالعه کنید.\n"},{"id":2,"href":"/fa/docs/measure-internet-censorship/DNS/","title":"بررسی سانسور اینترنت در ارتباط DNS","section":"بررسی سانسور اینترنت: مقدمه","content":"بررسی سانسور اینترنت در ارتباط DNS #  اولین قدم برای دسترسی به اینترنت DNS است. وقتی شما آدرس نام دامنه را وارد می کنید، این نام باید به IP تبدیل شود تا دستگاه شما بتواند با سرور آن ارتباط برقرار کند. این کار توسط DNS انجام می شود. یکی از بهترین ابزار ها برای بررسی سانسور در DNS نرم افزار dig است. که علاوه بر لینوکس و Mac OS، در ویندوز هم قابل استفاده است. (پکیج dnsutils و یا bind-utils در لینوکس)\nدر حال حاضر روش های مختلفی برای انجام تست DNS داریم. چند مورد پر استفاده و مهم از آنها عبارت اند از:\n DNS over UDP DNS over TCP DNS over HTTPS DNS over TLS  DNS over UDP #  DNS over UDP روش پیشفرض اکثر سیستم عامل ها است. این روش توسط شخص ناشناس قابل مشاهده و یا دستکاری است. اکثر سیستم های سانسور و بدافزار های شبکه، از این روش برای تغییر مسیر کاربران استفاده می کنند. در ایران معمولا جواب درخواست های DNS سایت های فیلتر شده به یکی از سه آدرس 10.10.34.34، 10.10.34.35، 10.10.34.36، تغییر می کنند.\nدرخواست DNS از طریق مقدار پیشفرض DNS تنظیم شده در سیستم عامل:\n$ dig twitter.com \n  درخواست DNS با تنظیم دستی سرور DNS:\n$ dig twitter.com @8.8.8.8 \n  نمایش این packet ها در نرم افزار wireshark:\n  انجام این درخواست با ابزار پیشفرض سیستم عامل ویندوز:\n\u0026gt; nslookup twitter.com \n  و تنظیم آدرس سرور DNS اختصاصی:\n\u0026gt;nslookup twitter.com 1.1.1.1 \n  البته ممکن است همیشه چنین جوابی دریافت نکنید و درخواست های شما با جوابی همراه نباشند. در این شرایط درخواست ها وارد سیاه چاله می شوند.\n$ dig youtube.com \n  در Wireshark هم می بینید که جوابی دریافت نشده:\n  و همینطور در سیستم عامل و سرور DNS متفاوت:\n\u0026gt; nslookup youtube.com 1.1.1.1 \n  نکته ی مهم این است که در ایران فرقی نمی کند که از چه سرویس ای درخواست می کنید. حتی فرقی نمی کند که آیا IP ای که درخواست می شود، واقعا سرویس DNS است یا خیر. و یا حتی فعال است یا خیر. به عنوان مثال، اگر از 1.1.1.1 استفاده می کنید و درخواستی دارید که فیلتر شده باشد، درخواست شما توسط سیستم سانسور ضبط می شود و به 1.1.1.1 نمی رسد و جوابی مثل 10.10.34.34 برای شما ارسال می کند.\nبرای امتحان، می توانید در سرور شخصی خود این دستور را اجرا کنید تا packet های ورودی مرتبط، به شما نشان داده شوند:\n  مقدار آخر برابر با IP ی دستگاه ایران شما است و eth0 نام interface اصلی شما که می توانید با اجرای دستور زیر آن را به دست بیاورید:\n$ ip link show\n در ادامه ی بحث اصلی، اگر درخواست را به صورت زیر وارد کنید:\n  که مقدار آخر برابر با IP ی سرور خارج شما است. چنین packet هایی در سرور دریافت می کنید:\n  اما اگر یک سایتی که فیلتر شده را به جای آدرس google.com وارد کنید، packet ای در سمت سرور دریافت نمی شود و سیستم سانسور از سمت سرور ای که هیچ سرویس DNS در آن فعال نیست. IP ای از 10.10.34.3x را بر می گرداند:\n  سیستم سانسور چین، معمولا یک IP ی random در جواب DNS سایت های سانسور شده برای کاربر ارسال می کند. از آنجایی که IP با آدرس درخواستی برابر نخواهد بود، نتیجتا باعث خطا می شود. یا سیستم سانسور بعضی از کشور ها 127.0.0.1 و یا 192.168.0.1 را در جواب سایت های سانسور شده ارسال می کنند. همچنین ممکن است بعضی از کشور ها از یک IP در دسترس اینترنت (IP public) برای سانسور استفاده کنند. مانند IP ای که ایران استفاده می کرده تا افرادی که سهوا و یا عمدا به سرویس های ممنوعه، همانند سایت قمار و شرطبندی، تلگرام، سرویس کوتاه کننده ی لینک و غیره رجوع می کردند، تحت پیگرد قانونی قرار دهد.\n DNS over TCP #  DNS over TCP هم از پورت مشابه DNS over UDP استفاده می کند و مشترکا Do53 معرفی می شوند. هر دوی اینها توسط شخص ناشناس قابل مشاهده است اما در ایران DNS over TCP به سمت سرور های خارجی دستکاری نمی شود. توجه داشته باشید که اگر از یک DNS داخلی استفاده کنید، در اکثر آنها فرقی نمی کند که شما از چه پروتکل ای استفاده می کنید و جواب IP ی صفحه ی سانسور برای شما برگردانده می شود.\n$ dig youtube.com +tcp \n  استفاده از سرور خارجی:\n$ dig youtube.com +tcp @8.8.8.8 \n  در ویندوز nslookup قابلیت DNS over TCP ندارد. خاطر همین ما از dig استفاده می کنیم:\n\u0026gt; .\\dig youtube.com +tcp \u0026quot;@8.8.8.8\u0026quot; \n  گاهی مشاهده شده که بعضی درخواست هاتوسط سیستم سانسور وارد سیاهچاله می شوند.\n$ dig +tcp youtube.com @1.1.1.1 ;; Connection to 1.1.1.1#53(1.1.1.1) for youtube.com failed: timed out. ;; Connection to 1.1.1.1#53(1.1.1.1) for youtube.com failed: timed out. ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.11.5-P4-5.1-Debian \u0026lt;\u0026lt;\u0026gt;\u0026gt; +tcp youtube.com @1.1.1.1 ;; global options: +cmd ;; connection timed out; no servers could be reached ;; Connection to 1.1.1.1#53(1.1.1.1) for youtube.com failed: timed out.  DNS over HTTPS #  DNS over HTTPS یا به اختصار DoH، معروف ترین نوع DNS رمزنگاری شده است که اکنون استفاده می شود. پورت پیشفرض اش معمولا 443 است و در هر نرم افزاری که می تواند درخواست HTTPS انجام دهد قابل پیاده سازی است.\nدر شرایط عادی شخص ناشناس فقط می تواند IP و یا نام دامنه (در صورت وجود) همین سرویس را مشاهده کند. اینکه درخواست و یا جواب چیست از دید شخص ناشناس پوشیده است. توضیح اینکه در شرایط عادی، برای آدرس سرور DoH، از نام دامنه استفاده می شود. به عنوان مثال https://dns.google/dns-query . قبل از اینکه درخواست DNS اصلی شما از سرور درخواست شود، باید آدرس dns.google به IP تبدیل شود. برای این کار از DNS پیشفرض سیستم عامل استفاده می شود که معمولا DNS over UDP است. بعد از انجام TCP handshake و بعد TLS handshake، درخواست کاربر که به صورت HTTP است رمزنگاری و ارسال و جواب دریافت می شود.\nدر حال حاضر سیستم عامل های Windows، MacOS، iOS و همچنین مرورگر های بر پایه ی Chromium مانند Chrome، Edge، Opera، Brave و غیره و مرورگر Mozilla FireFox از DoH پشتیبانی می کنند. در کروم، روش پیشفرض به این صورت است که اگر DNS ای که کاربر تنظیم کرده است، قابل ارتقا به DoH را نیز داشته باشد، از آن استفاده می کند، مگر اینکه کاربر روش دیگری را انتخاب کرده باشد. در فایرفاکس در صورت فعال کردن DoH، روش پیشفرض به این صورت است که اگر درخواست DoH با شکست مواجه شد، از DNS پیشفرض سیستم استفاده کند. که یعنی اگر DNS پیشفرض سیستم عامل کاربر از نوع DNS over UDP باشد، در این شرایط شخص ناشناس می تواند درخواست و جواب را مشاهده و یا دستکاری کند. امنیت ارتباط در این روش به اعتبار root CA سیستم عامل و یا برنامه ی مورد استفاده ی شما بستگی دارد.\nبرای انجام تست، می توانید از curl برای DoH استفاده کنید و جواب json دریافت کنید.\nدرخواست ساده از گوگل:\n$ curl -s \u0026#34;https://dns.google.com/resolve?name=www.who.int\u0026amp;type=A\u0026#34; {\u0026#34;Status\u0026#34;: 0,\u0026#34;TC\u0026#34;: false,\u0026#34;RD\u0026#34;: true,\u0026#34;RA\u0026#34;: true,\u0026#34;AD\u0026#34;: false,\u0026#34;CD\u0026#34;: false,\u0026#34;Question\u0026#34;:[ {\u0026#34;name\u0026#34;: \u0026#34;www.who.int.\u0026#34;,\u0026#34;type\u0026#34;: 1}],\u0026#34;Answer\u0026#34;:[ {\u0026#34;name\u0026#34;: \u0026#34;www.who.int.\u0026#34;,\u0026#34;type\u0026#34;: 5,\u0026#34;TTL\u0026#34;: 366,\u0026#34;data\u0026#34;: \u0026#34;www.who.int.cdn.cloudflare.net.\u0026#34;},{\u0026#34;name\u0026#34;: \u0026#34;www.who.int.cdn.cloudflare.net.\u0026#34;,\u0026#34;type\u0026#34;: 1,\u0026#34;TTL\u0026#34;: 216,\u0026#34;data\u0026#34;: \u0026#34;104.17.113.188\u0026#34;},{\u0026#34;name\u0026#34;: \u0026#34;www.w ho.int.cdn.cloudflare.net.\u0026#34;,\u0026#34;type\u0026#34;: 1,\u0026#34;TTL\u0026#34;: 216,\u0026#34;data\u0026#34;: \u0026#34;104.17.112.188\u0026#34;}]}  از Cloudflare :\n$ curl -H \u0026#39;accept: application/dns-json\u0026#39; \u0026#39;https://1.1.1.1/dns-query?name=www.who.int\u0026amp;type=A\u0026#39; {\u0026#34;Status\u0026#34;:0,\u0026#34;TC\u0026#34;:false,\u0026#34;RD\u0026#34;:true,\u0026#34;RA\u0026#34;:true,\u0026#34;AD\u0026#34;:false,\u0026#34;CD\u0026#34;:false,\u0026#34;Question\u0026#34;:[{\u0026#34;name\u0026#34;:\u0026#34;www.who.int\u0026#34;,\u0026#34;type\u0026#34;:1}],\u0026#34;Answer\u0026#34;:[{\u0026#34;name\u0026#34;:\u0026#34;www.who.int\u0026#34;,\u0026#34;type\u0026#34;:5,\u0026#34;TTL\u0026#34;:839,\u0026#34; data\u0026#34;:\u0026#34;www.who.int.cdn.cloudflare.net.\u0026#34;},{\u0026#34;name\u0026#34;:\u0026#34;www.who.int.cdn.cloudflare.net\u0026#34;,\u0026#34;type\u0026#34;:1,\u0026#34;TTL\u0026#34;:239,\u0026#34;data\u0026#34;:\u0026#34;104.17.112.188\u0026#34;},{\u0026#34;name\u0026#34;:\u0026#34;www.who.int.cdn.cloudflare. net\u0026#34;,\u0026#34;type\u0026#34;:1,\u0026#34;TTL\u0026#34;:239,\u0026#34;data\u0026#34;:\u0026#34;104.17.113.188\u0026#34;}]}  ( -H یک header به درخواست HTTP اضافه می کند.)\nدر بعضی نسخه های لینوکس می توان از دستور doh استفاده کرد:\n$ doh twitter.com   و یا اگر می خواهید در درخواست curl از DoH استفاده کنید:\n$ curl --doh-url https://doh.powerdns.org/ https://www.google.com/.well-known/security.txt Contact: https://g.co/vulnz Contact: mailto:security@google.com Encryption: https://services.google.com/corporate/publickey.txt Acknowledgements: https://bughunter.withgoogle.com/ Policy: https://g.co/vrp Hiring: https://g.co/SecurityPrivacyEngJobs # Flag: BountyCon{075e1e5eef2bc8d49bfe4a27cd17f0bf4b2b85cf}  در بعضی ISP ها ممکن است با خطا مواجه شوید که به دلیل شیوه ای از سانسور اینترنت است که در بخش مربوط به بررسی سانسور در HTTPS توضیح داده شد.\nDNS over TLS #  DNS over TLS یا به اختصار DoT، روشی رمزنگاری شده از DNS over TCP است. نوع ارتباط در ALPN از نوع dot است و طبق استاندارد، بر روی پورت 853 باید سرویس دهی شود. شناسایی و مسدود کردن این نوع توسط سیستم های سانسور بسیار راحت تر از DoH است. اما محتوای درخواست ها و جواب ها توسط شخص ناشناس قابل مشاهده نیست. این نوع نیز همانند DoH در صورت استفاده از نام دامنه، متکی به سرویس DNS over UDP پیشفرض است.\nدر حال حاضر سیستم عامل های Android، Linux، iOS و MacOS از این نوع DNS پشتیبانی می کنند.\nدر آخرین نسخه از dig (نسخه ی تست شده:‌ 9.17.11 ) این امکان فراهم شد تا بتوان درخواست DoT داشت. به صورت استفاده از +tls:\n\u0026gt; .\\dig telegram.org +tls \u0026quot;@dns9.quad9.net\u0026quot; \n  البته این قابلیت در dig هنوز به صورت کامل استاندارد ها را رعایت نکرده و به صورت رسمی در لحظه ی نوشتن این مقاله، این قابلیت رونمایی نشده.\nتوجه داشته باشید که DNS نقش حیاتی در امنیت ارتباطات شما دارد. اگر از DNS نامعتبر استفاده کنید و یا اینکه شخص ناشناس بتواند محتوای ارسالی و یا دریافتی آن را دستکاری کند، امنیت شما به خطر می افتد. به این دلیل همیشه سعی کنید از DNS های معتبر و با قابلیت رمزنگاری محتوا استفاده کنید. در ارتباطات رمزنگاری شده، یا شما مشکلی نخواهید داشت، و یا ارتباط با آن سرور تماما مسدود می شود.\n"},{"id":3,"href":"/fa/docs/measure-internet-censorship/Network/","title":"بررسی سانسور در ارتباط با سرور در لایه‌ی شبکه و انتقال","section":"بررسی سانسور اینترنت: مقدمه","content":"بررسی سانسور در ارتباط با سرور در لایه‌ی شبکه و انتقال #  برای بررسی دسترسی به سرور معمولا از دو دستور ping و یا traceroute استفاده می شود. باید توجه داشته باشید که وقتی به صورت عادی از این دو دستور استفاده می کنید، شما قصد بررسی دسترسی IP دارید و اگر از آدرس دامنه برای آزمایش استفاده کنید، قبل از شروع درخواست، به صورت خودکار، یک بار از طریق DNS تنظیم شده در سیستم عامل شما، آدرس دامنه را به آدرس IP تبدیل می کند. در نتیجه اگر سانسور از طریق دستکاری DNS انجام شده باشد شما از طریق آدرس دامنه نمی توانید در دسترس بودن سرور از طریق IP را مورد بررسی قرار دهید.\nدستور ping #  برای اجرای دستور ping در لینوکس می توانیم به صورت زیر عمل کنیم:\n$ ping -c9 google.com \n  دستور ping در همه ی سیستم عامل ها از پروتکل ICMP استفاده می کند.\nTTL به معنای Time to live است و مقدار آن نمایانگر حداکثر دفعاتی است که یک packet می تواند در شبکه پرش کند. به طور معمول، TTL ها با مقدار 64 در لینوکس و Mac OS، مقدار 128 در ویندوز و مقدار 255 در روتر ها ارسال می شوند. در اینجا مقدار 111 می تواند به این معنا باشد که سرور با شما به اندازه ی 17 تا hop فاصله دارد. به این صورت که در صورت دستکاری نشدن packet در شبکه، احتمالا سرور با مقدار 128 آن را ارسال کرده و اگر 128 را منهای 111 کنیم، 17 باقی می ماند. (توضیحات بیشتری در این رابطه می تواند وجود داشته باشد که در آینده مطرح خواهد شد.)\ntime به معنای زمان سپری شده در ارسال و دریافت جواب به میلی ثانیه است.\nامکانات مفید برای این دستور:\n -v برای نمایش اطلاعات بیشتر -D برای نمایش زمان انجام آزمایش. -n برای resolve نکردن DNS در هر درخواست -c برای مشخص کردن حداکثر تعداد درخواست  (نکته: بدون این موارد هم آزمایش به درستی انجام خواهد شد)\nاجرای دستور ping در ویندوز:\n\u0026gt; ping -n 9 google.com \n  امکانات مفید برای این دستور در ویندوز:\n -t برای ping به صورت بی پایان -n برای مشخص کردن تعداد ping (پیشفرض 4 تا)  همانطور که در ابتدا گفته شد، انجام دستور به شیوه ی زیر برای دامنه هایی که از طریق دستکاری DNS سانسور شده اند، درست نیست:\n$ ping -c9 twitter.com \n  به این دلیل که با این کار در حال ping به IP ی صفحه ی پیوندها خواهیم بود، نه IP ی توییتر!\nبرای انجام درست این درخواست، ابتدا باید IP ی اصلی را به شیوه ای که درخواست DNS ما سانسور نمی شود دریافت می کنیم:\n$ dig twitter.com +short +tcp @8.8.8.8 104.244.42.1 104.244.42.129  بعد آن را به جای دامنه جایگذاری می کنیم: $ ping -c9 104.244.42.1 \n  دستور ping با TCP #  در مواردی ممکن است سرور و یا شبکه ای که سرور در آن قرار دارد تمام درخواست های ICMP را نادیده بگیرد و هیچ جوابی دریافت نکنید. برای اینکه درخواستی مشابه با ping داشته باشیم اما با پروتکل TCP، پروتکلی که برای ارتباط HTTP نسخه های قبل از 3 استفاده می شود، ابزارهایی وجود دارند مانند hping3 در لینوکس:\n$ sudo hping3 -S -p 443 -c 9 google.com \n  به معنای\n  -S انجام درخواست از نوع TCP با پرچم SYN\n  -p تنظیم شماره ی Port\n  -с تنظیم تعداد دفعات تست\n  در ویندوز نیز می توان از tcping استفاده کرد:\n\u0026gt; .\\tcping.exe -p 443 104.20.225.46 \n  \u0026gt; .\\tcping.exe -p 443 104.20.225.45 \n  دستور traceroute #  دستور traceroute در لینوکس (پکیج traceroute، نه دیگری) استفاده می شود و در ویندوز از tracert. هر دوی اینها به شما این امکان را می دهند تا مسیر رفت (آپلود) تا سرور (نه مسیر بازگشت یا دانلود که احتمالا کمی متفاوت است) و hop های در میانه ی ارتباط را شناسایی کنید. و در صورت امکان، دلیل و یا مکان احتمالی اختلال و یا سانسور را متوجه شوید. اما دو تفاوت مهم بین این دو ابزار وجود دارد:\n  در traceroute به صورت پیشفرض از پروتکل UDP استفاده می شود اما در tracert فقط از پروتکل ICMP.\n  در traceroute امکان تغییر و سفارشی کردن پروتکل (ICMP, TCP و غیره) و پورت ها وجود دارد، اما در tracert نه.\n  همچنین نکات مهمی در این نوع بررسی وجود دارد که در انتها به آن پرداخت خواهد شد. اما چیزی که از قبل باید بدانید این است که زمان پاسخ، نمی تواند مطمئنا به معنای میزان تاخیر hop مورد نظر باشد. در اکثرمواقع routing ها به صورت سخت افزاری انجام می شوند و پردازش زیادی بر packet ها انجام نمی شود اما برای جواب دهی ممکن است میزان جواب های در صف و یا قدرت پردازش و همچنین اندازه ی جواب (شامل بودن و یا شامل نبودن تمام packet ارسالی) دخیل باشند.\nبرای اجرای دستور traceroute می توانیم به صورت زیر عمل کنیم:\n$ traceroute google.com \n  در اینجا زمان پاسخ hop دوم حدود 30 میلی ثانیه است. و hop چهارم که در همان شبکه است با حدود 15 ثانیه تاخیر نسبت به پاسخ قبلی همراه بوده است. این می تواند ناشی از تاخیر در پاسخ دادن خود hop سوم باشد و یا مشکل در routing بین hop های دوم و سوم.\nتا اولین پاسخ hop هفتم روند تاخیر افزایشی بوده و بعد حدود 25 میلی ثانیه کاهش در تاخیر مشاهده شده. این مسئله می تواند ناشی از کاهش بار شبکه باشد و یا تغییر routing در مسیری که بار کمتری بر روی آن است. باید توجه داشت که با توجه به تغییر سریع و غیر قابل پیشبینی مسیر ها در این شبکه، نمی توان مطمئن بود که جواب اول و دوم در hop هفتم، دقیقا از مسیر هایی رفت و یا برگشت ای عبور کردند که ما در hop های قبل از آن مشاهده کردیم.\nدر hop های هشتم و نهم، یکسان هستند. معمولا این حالت و موارد بازگشتی دیگر نشان از شبکه ی wall-gardened دارد. یعنی این نقطه، دیوار بین شبکه ی درون و بیرون است. جایی که نظارت و کنترل بر ورود و خروج محتوا صورت می گیرد. با توجه به ساختار شبکه ی ایران، احتمالا این فقط یکی از این دیوار ها و یا firewall های درون شبکه است.\nدر ادامه ی hop دوازدهم، ارتباط بیش از حد طولانی شده است و تمام پاسخ ها و یا درخواست ها سانسور شدند. این کار ممکن است توسط خود hop دوازدهم انجام شود و یا توسط hop سیزدهم. این روش احتمالا برای از بین بردن شواهد و مخفی کردن ادامه ی مسیر است.\nهمینطور در انتها، در پاسخ سرور مورد بررسی ما، درخواست دوم با timeout مواجه شده است. (علامت ستاره * ) که ممکن است به دلیل سانسور موقتی و یا افزایش مسیر در آن لحظه باشد. به این صورت که همچنان با سی hop در آن لحظه packet ارسالی ما به سرور نرسیده و اما جواب ICMP همچون قبل از آن، در مسیر بازگشت سانسور شده است.\nدر ابتدا IP هایی که با 172 شروع می شوند، متعلق به شرکت شاتل هستند. بررسی با Looking glass مرکز فیزیک نظری :\n  و در ادامه مواردی مانند hop دوازدهم که با 10 شروع می شوند متعلق است به شرکت ارتباطات زیرساخت:\n  همانطور که گفته شد اگر سرویسی از طریق DNS مسدود است و ما DNScrypt/DoT/DoH ای نداریم، باید از IP برای تست استفاده کنیم. به عنوان مثال برای تست یکی از IP های توییتر:\n$ traceroute 104.244.42.1 \n  نکته ی جالب در این دو traceroute که در شبکه ی شاتل انجام شده است این است که مسیر مربوط به دامنه ی گوگل بیشتر از توییتر است. دلیل این مسئله به احتمال زیاد bandwidth-throttling است. تکنیکی برای کاهش سرعت یک سرویس. اما اثبات این تکنیک، راحت نیست. چرا که از طرفی می بینیم که پاسخ از سرور توییتر زمان بیشتری نسبت به پاسخ سرور گوگل صرف کرده است.\nالبته باید توجه داشته باشید که هر ISP نسبت به هر پروتکل ممکن است رفتار متفاوتی نشان دهد. و یا این رفتار فقط در بعضی زمان ها اتفاق بیفتد و یا نسبت به تمام IP های یک سرویس چنین رفتاری نشان ندهد. تست دوباره:\n$ traceroute google.com \n  همانطور که در تصویر مشخص است، IP متفاوت، رفتار متفاوتی دارد. اما در انتها دو درخواست اولیه با timeout مواجه شدند که قبلا در مورد این مسئله توضیح داده شده است. (یا سانسور و یا تغییر route)\nپیش تر گفته شده که پروتکل پیشفرض traceroute در سیستم عامل های Unix-like مانند لینوکس، macOS و غیره، UDP است. اما این امکان وجود دارد که با افزایش دسترسی، از پروتکل های دیگر نیز برای این کار استفاده کنید.\nبه عنوان مثال پروتکل ICMP :\n$ sudo traceroute google.com --icmp \n  و همانطور که گفته شد، در ویندوز با tracert فقط می توانید با پروتکل ICMP این کار را انجام دهید:\n\u0026gt; tracert google.com \n  اما چیزی که بیش از هر چیز ممکن است نیازتان شود، پروتکل TCP است:\n$ sudo traceroute google.com --tcp \n  در اینجا می بینیم که سومین hop به گوگل رسیدیم. یعنی مستقیم بعد از ISP ! آن هم در کمتر از 40 میلی ثانیه که با توجه به آزمایش قبلی (و بعدی) که حدود 150 میلی ثانیه بود و با اختلالات ساختاری و خلاقیت های شبکه ی داخلی ایران، این سرعت کاملا دور از واقعیت است. دلیل این اتفاق چیز دیگریست که در بخش بعدی مربوط به ارتباط HTTP توضیح داده خواهد شد.\nبه دلیل اینکه port پیشفرض برای TCP مقدار 80 است، در مورد بعدی، علاوه بر تغییر port به 443، برای ساده سازی نمایش، تعداد هر بار query در هر TTL را هم به 1 تغییر دادیم و همینطور در بخش option تنظیم کردیم که اطلاعات بیشتری از جواب های از نوع TCP برای برای ما نشان دهد:\n$ sudo traceroute google.com --tcp --queries=1 -O info --port=443 \n  در اینجا می بینید که مسیر در پورت 443 متفاوت است و بعد از hop دوازدهم، تمام پاسخ های ICMP سانسور شدند. درخواست ارسالی TCP است و با TTL به مقدار 20 به سرور رسیده و جواب SYN,ACK دریافت شده. اما hop های میانه که با TTL صفر مواجه می شوند، جواب ICMP بر می گردانند. در نتیجه، در اینجا، این جواب های ICMP هستند که سانسور می شوند.\nتا سال گذشته در بیشتر مواقع در جواب درخواست به IP های مسدود شده، به جای پاسخ هایی با پرچم SYN,ACK، پاسخ با پرچم RST,ACK دریافت می شده است. این packet دریافتی، گاهی دستکاری جواب SYN,ACK سرور بود و گاهی مستقیما از سیستم سانسور ارسال می شد. که برای اطمینان در این موارد باید ترافیک کل stream آنالیز شود. اما RST همیشه به معنی سانسور نیست. گاهی سرور در اثر باز نداشتن آن port و یا تنظیم اشتباه، این پیام را بر می گرداند. به عنوان مثال از یک ISP ای دیگر در ایران به سمت سایت همراه اول traceroute انجام می دهیم:\n$ sudo traceroute --tcp --port=443 -O info -m 50 mci.ir \n  در اینجا می بینیم که سایت همراه اول نسبت به درخواست ها از غیر از شبکه ی خودش حساس است و از آن امتناع می کند. همچنین دو درخواست اولیه همراه با SYN,ACK نبودند. این ممکن است که جواب دریافتی به جای TCP از نوع ICMP بوده باشد و این بدان معنی است که احتمالا رفتاری از firewall باشد.\nاین تست را چند بار تکرار می کنیم:\n   در تست دوباره، فقط یک بار در بار دوم SYN,ACK به درستی دریافت شد و دو مورد دیگر RST,ACK بودند.\nاما در سیستم سانسور، اخیرا برای اتلاف بیشتر وقت و عمر کاربران، از ارسال هر جوابی به کاربر اجتناب می شود. به عنوان مثال، IP ی مربوط به آدرس t.me را بررسی می کنیم:\n$ sudo traceroute 149.154.167.99 --tcp --port=443 -O info \n  طبق trace های قبلی، تا hop هفتم همچنان در بستر ISP قرار داریم. این یعنی قبل از ورود به بستر شرکت ارتباطات زیرساخت، از ادامه ی ارتباط جلوگیری شده است و به عبارتی دیگر این مسدود سازی در سطح ISP انجام شده.\nسانسور مسیر ورودی #  همانطور که در ابتدا گفته شد، مسیر رفت با مسیر بازگشت ممکن است متفاوت باشد و همیطور ممکن است سانسور فقط در یکی از این دو صورت بگیرد.\nدر مواردی مانند سانسور Clubhouse شاهد این بودیم که در بعضی شبکه ها، بعد از خروج از کشور دیگر جوابی دریافت نمی شود:\n$ sudo traceroute 104.20.225.46 --tcp --port=443 \n  اما در همان IP range در hop دهم به جواب می رسیدیم:\n$ sudo traceroute 104.20.225.45 --tcp --port=443 \n  و یا در شبکه ای دیگر:\n$ sudo traceroute 104.20.225.46 --tcp --port=443 \n  این مسئله فقط می تواند به این دلیل باشد که تمام packet های ارسالی از سرور مورد تست ما مسدود می شوند. برعکس مثال های قبل که packet ارسالی از کلاینت مسدود می شدند.\nدر traceroute همچنین این امکان وجود دارد تا مسیر برگشتی محاسبه شود. به این صورت که TTL های ارسالی از hop ها به صورت سه مورد اصلی 255 (روتر)، 128 (ویندوز) و 64 (لینوکس/یونیکس) در نظر گرفته می شوند و TTL جواب، منهای یکی این سه که محتمل تر هستند می شود.\n$ sudo traceroute google.com --tcp --port=443 -O info --back \n  به عنوان مثال، می بینیم که در hop هشتم مسیر برگشت یک واحد طولانی تر است و hop دهم نیز همانند hop هشتم است. (firewall یا سیستم سانسور ایران)\nسانسور پورت خاص #  گاهی سانسور بر مبنای port است. طبق این توییت بعضی پورت ها یا پروتکل ها محدود شدند.\nقابل توجه :\n\u0026quot; #شاتل به صلاح دید خود، در راستای حفظ امنیت شبکه، می‌تواند بدون اطلاع رسانی دسترسیهای مشترک به پورت یا پروتکلها را محدود کند. در حال حاضر موارد محدود شده به شرح جدول زیر است. \u0026quot;\nوقتی میگیم تو این مملکت اینترنت نیست از همین جاها شروع میشه.#adsl pic.twitter.com/ddTY26326H\n\u0026mdash; Matin (@matinrco) March 18, 2020  برای آزمایش، ما پورت مربوط به SMB ویندوز که برابر با 445 است را در TCP بررسی می کنیم:\nsudo traceroute google.com --tcp --port=445 \n  علامت !X در traceroute به معنی \u0026ldquo;communication administratively prohibited\u0026rdquo; است. یعنی این ارتباط، هرچه که هست، در hop چهارم ممنوع اعلام شده. (برخلاف !Z که فقط مقصد مورد توجه است) حالا ارتباط UDP در Port 445 که در تصویر نیست:\ntraceroute google.com --udp --port=445 \n  که باز هم نشان از این دارد که ISP ارتباط UDP به این سرور را هم مسدود کرده است.\n(SMB آسیب پذیری های زیادی داشته. اما بستن هر چیز به جای آموزش درست، راه حل نیست، حذف کردن صورت مسئله است. اگر واقعا برای جلوگیری از حمله باشد، این کار تاثیر چندانی ندارد. این حمله بدون استفاده از ISP ی شاتل هم می تواند در شبکه ی داخلی سازمان و یا کاربر اتفاق بیفتد.)\nدر چه صورت traceroute می تواند سندی از کاهش سرعت باشد؟ #  یک موضوع که ممکن است بتواند برای بررسی این مسئله مورد استفاده قرار بگیرد که کدام hop در حال ایجاد اختلال در ارتباط است، بررسی زمان پاسخ های آنها است. اما فقط به شرطی که hop های بعدی نیز حداقل به میزان hop قبلی تاخیر داشته باشند. این موضوع در مورد packet loss هم صدق می کند.\nبه این نتیجه از برنامه ی MTR دقت کنید:\n$ mtr instagram.com \n  با توجه به مقدار packet loss، در hop دهم هیچ جوابی دریافت نشد. یعنی 100٪ packet loss، اما این به معنی مسئول بودن در کاهش سرعت نیست. چرا که در hop بعدی میزان کمتر است و به 22.2٪ و در hop بعد از آن به 0٪ رسیده است. همین مسئله در مورد hop های بعدی مثل hop سیزدهم صدق می کند.\nبا توجه به میزان تاخیر در پاسخ، بجز تاخیر تا ارتباط با ISP در hop دوم، تاخیر جدی اولیه با میزان تاخیر بیش از ده ثانیه، که در امتداد مسیر ادامه دارد، hop سوم است. همچنین دراین hop می بینیم که StDev یا انحراف معیار به مقدار 5 است. این به معنی نوسان زیاد در پاسخ این دستگاه است.\nبا توجه به زمان تاخیر، احتمالا تاخیر جدی دوم، hop دهم است. درhop یازدهم این تاخیر نمایان می شود که حدود 70 میلی ثانیه تاخیر وجود دارد. همچنین یک تاخیر قابل توجه سوم ای به میزان 100 میلی ثانیه هم وجود که در hop دوازدهم و یا در بین hop های یازدهم و دوازدهم اتفاق افتاده است.\nاز hop دوازدهم به بعد، میزان تاخیر بسیار کم است اما همچنان میزان انحراف معیار بالا است.\nاین نکته باید تاکید شود که این اندازه گیری ها باید چند بار تکرار شوند تا از پایداری این شیوه های اختلال اطمینان حاصل شود. به دلیل اینکه همانطور که پیش تر گفته شد، ممکن است مسیر ارتباط بارها تغییر کند و در آن لحظه ی مشاهده ی تاخیر، packet های ارسالی از مسیری عبور نکند که قبل از آن لیست شده اند. ( در مورد شرایط احتمالی در mtr بیشتر بخوانید. )\nدر ویندوز ابزاری مشابه با کمی تفاوت وجود دارد به اسم pingpath :\n\u0026gt; pathping 34.234.142.160 \n  این ابزار این امکان را فراهم می کند که تفاوت بین عدم پاسخ hop و ایجاد اختلال در ارتباط مشخص شود. البته این مسئله باز هم ممکن است تحت تاثیر موارد دیگری قرار بگیرد و نمی تواند قطعیت داشته باشد. به عنوان مثال، این ابزار فقط تا hop ای اندازه گیری خواهد که که با timeout برخورد نکند. همچنین تغییر routing سریعی که در برخی نقاط در شبکه ی ایران اتفاق می افتد، سلامت داده ی این نوع اندازه گیری ها را زیر سوال می برد.\n  "},{"id":4,"href":"/fa/docs/measure-internet-censorship/Application/","title":"بررسی سانسور در ارتباط با سرور در لایه‌ی کاربرد","section":"بررسی سانسور اینترنت: مقدمه","content":"بررسی سانسور در ارتباط در لایه ی کاربرد #  در ارتباط عادی، سومین مرحله از بازدید یک سایت و یا استفاده از سرویس، ارتباط با برنامه ی نصب شده در سرور است. به عنوان مثال Apache، IIS، و یا هر سرویس ساده ی دیگر.\nبهترین ابزار بررسی ارتباط با پروتکل های HTTP، HTTPS، MQTT و FTP و غیره، curl است که اکثر سیستم عامل ها را پشتیبانی می کند.\nبرای بررسی روش هایی که یک سایت در لایه ی بالاتر از IP مسدود شده، اولین قدم بررسی ارتباط HTTP است. اما توجه به این نکته مهم است که در این بررسی نیز باید از IP اصلی استفاده کنیم، نه چیزی که سیستم سانسور به ما می دهد.\nارتباط HTTP #  در این سطح ما می خواهیم که DNS Hijacking در تست ما دخیل نباشد و در قدم اول فقط می خواهیم ببینیم که اگر از IP ی درست استفاده کنیم، باز هم ارتباط HTTP سانسور می شود؟ :\n\u0026gt; .\\curl -v --doh-url \u0026quot;https://mozilla.cloudflare-dns.com/dns-query\u0026quot; http://twitter.com/ \n  (تصویر از انتهای لاگ \u0026ndash; تست شده در ویندوز)\nدر خط اول می بینید که درخواست DoH به درستی کامل شد. در نتیجه IP ی دریافت شده درست است.\nدر ادامه، به سایت توییتر با آدرس دریافت شده، درخواست فرستاده شد و چون ارتباط HTTP است، یعنی رمزنگاری نیست و به راحتی توسط شخص ناشناس قابل دستکاری است، خطای 403 در Header و iframe ای که صفحه ی سانسور جمهوری اسلامی را نمایش خواهد داد، دریافت شد.\nبرای آزمایش مشابه، اگر قصد وصل شدن به یک IP ی خاص داریم، می توانیم به این صورت از curl استفاده کنیم:\n\u0026gt; .\\curl -v --resolve twitter.com:80:104.244.42.193 http://twitter.com/ \n  مقدار 80 به معنای Port ای است که قصد وصل شدن به آن را داریم.\n--resolve برای قرار دادن یک IP در DNS cache موقت curl است.\nحال سوالی که پیش می آید این است که آیا این سانسور، بر مبنای مقدار Host در header است و یا بر مبنای محتوای درخواست، و یا هر دو؟\nبرای بررسی، می توانیم از آدرسی که می دانیم که سانسور نیست استفاده کنیم. مانند example.com :\n\u0026gt; .\\curl -v http://example.com \n  در اینجا می بینیم که HTTP 200 OK دریافت شده و مقدار title برابر با مقداری است که با اینترنت بدون سانسور به دست می آوریم. این بدان معناست که در این شبکه ارتباط با این دامنه و IP سانسور نمی شود.\nحال که از مسدود نبودن آن مطمئن هستیم، می توانیم از این IP برای آزمایش استفاده کنیم. در curl، علاوه بر --connect-to و --resolve می توانیم از -H یا --header نیز استفاده کنیم. به این معنا که ما قصد اضافه کردن و یا باز نویسی یک header در HTTP داریم. به این صورت:\n\u0026gt; .\\curl -v -H 'Host: twitter.com' http://93.184.216.34 \n  در اینجا آدرس توییتر در header به عنوان Host انتخاب شد اما خطای 503 دریافت کردیم.\nدرخواست مشابه را از طریق سرور خارجی انجام می دهیم تا واکنش سرور را نسبت به این درخواست ببینیم و مطمئن شویم که این خطا، خطایی مربوط به سرور نیست:\n  همانطور که انتظار می رفت، این خطا خارج از سیستم سانسور جمهوری اسلامی مشاهده نشده است.\nاین خطایی است که از سمت سیستم سانسور جمهوری اسلامی، به دلیل ناتوانی در تحلیل به موقع درخواست باز می گرداند. در اینجا می توانید ببینید که در یک تست کامل توسط OONI-probe تعداد 329 آدرس این خطا را دریافت کردند. حدود 15٪ از کل لیست (شامل اکثریت پروتکل HTTPS).\nحال برای بررسی دقیق زمان واکنش --trace-time را اضافه می کنیم:\n\u0026gt; .\\curl -v --trace-time -H 'Host: twitter.com' http://93.184.216.34 \n  زمان پاسخگویی با خطای 503، دقیقا 30 ثانیه تنظیم شده است. چند بار این تست را تکرار می کنیم و بعد از گذشت چند دقیقه از درخواست اولیه، سیستم سانسور جواب معمول خود را برای سانسور، ارسال می کند:\n  حال آزمایش می کنیم که سیستم سانسور جمهوری اسلامی نسبت به ارتباط با IP ی توییتر، اما دامنه ی example.com در header چه واکنشی نشان می دهد:\n\u0026gt; .\\curl -v -H 'Host: example.com' http://104.244.42.193/ \n  جواب تعجب برانگیزی دریافت شده است. در حالت عادی شما نمی توانید از IP یک سایت دیگر استفاده کنید و جواب یکسان بگیرید. مگر اینکه هر دو بر روی یک هاست اشتراکی باشند و یا هر دو از CDN خاصی استفاده کنند که از domain-fronting پشتیبانی می کند.\nبرای اطمینان دوباره از سرور خارجی همین درخواست را تکرار می کنیم:\n  جواب متفاوت است. در نتیجه، پاسخ قبلی احتمالا به دلیل وجود سیستم Cache در اینترنت آن شبکه است. در بخش «لایه ی شبکه و انتقال»، نشان داده شد که در دستور traceroute با Port 80 و به صورت TCP، بعد از فقط ۳ Hop، با تاخیر بسیار پایین، از سرور مقصد جواب دریافت می کردیم. این سیستم احتمالا فقط بر مبنای مقدار Host کار می کند و IP را برای درخواست نهایی مد نظر قرار نمی دهد.\nیک تست دیگر انجام می دهیم. با IP ی تلگرام و دامنه ی iran.ir :\n\u0026gt; .\\curl -v -H 'Host: iran.ir' http://149.154.167.99/ \n  در نتیجه، IP اگر مسدود باشد، از آن جلوگیری می شود، تفاوتی وجود ندارد. به جای تلگرام از IP ی Wikipedia استفاده می کنیم:\n\u0026gt; .\\curl -v -H 'Host: iran.ir' http://91.198.174.192/ \n  دوباره خطای 503 دریافت کردیم که به نظر سیستم Cache جمهوری اسلامی برای آدرس iran.ir آماده نبود.\nاین بار به جای آدرس iran.ir از google.com استفاده می کنیم که می دانیم که به تازگی حداقل یک بار توسط مردم درخواست داده شده است:\n\u0026gt; .\\curl -v -H 'Host: google.com' http://91.198.174.192/ \n  همانطور که انتظار می رفت، جواب داده شد. همین درخواست را دوباره از سرور خارج انجام می دهیم:\n  می بینیم که جواب متفاوت است. دوباره همین درخواست را از ایران انجام می دهیم و www. را اضافه می کنیم:\n\u0026gt; .\\curl -v -H 'Host: www.google.com' http://91.198.174.192/  \n  محتوای صفحه ی گوگل از طریق IP ی ویکی‌پدیا به صورت کامل دریافت شده است. با توجه به ساعت درخواست، به نظر درخواست در همان لحظه انجام شده و در نتیجه این یک middle box در سیستم سانسور جمهوری اسلامی است.\nدر این رابطه، در گذشته گزارشی توسط Citizenlab منتشر شده که رویکرد سیستم سانسور ای که توسط شرکت کانادایی Netsweeper ساخته شده را به صورت زیر به تصویر کشیده است:\n  ارتباط HTTPS #  همانند HTTP ما نباید سانسور از طریق DNS hijacking را در این سطح از آزمایش ها دخیل کنیم. برای این کار، از همان روش های توضیح داده شده در ارتباط HTTP میتوانیم استفاده کنیم. بجز اینکه تمام header ها و آدرس ها رمزنگاری می شوند و در نتیجه توسط سیستم سانسور قابل مشاهده نیستند تا نسبت به آنها سانسور شدن یا نشدن تصمیم گیری شود. اما موارد جدیدی وجود دارند که سیستم سانسور نسبت به آنها تصمیم گیری کند و در صورت تمایل، از ادامه ی ارتباط جلوگیری کند.\nاولین مورد می تواند SNI باشد. بخشی در ارتباط TLS که به سرور این اطلاع را می دهد که کاربر قصد وصل شدن به چه host ای دارد.\nSNI در Client Hello قرار دارد. اما بعد از این packet، سرور Server Hello را ارسال می کند که اگر زیر نسخه ی TLSv1.3 باشد، محتوای сerfiticate به صورت plain text ارسال می شود. در گذشته از این طریق شناسایی محتوای رمزنگاری نشده در این packet، ارتباط سرورهای اینستاگرام در ایران مسدود شده بود. (تنها کشوری که تاکنون مشاهده شده که چنین کاری انجام داده است)\nاما با پیشرفت تکنولوژی این ضعف دیگر در نسخه های جدید وجود ندارد. البته برای حل مشکل SNI نیز استانداردی در حال نوشته شدن است که extension های با اطلاعات حساس در Client Hello به صورت رمزنگاری شده در extension جدیدی به نام ECH قرار بگیرند.\nدر حال حاضر ارتباط HTTPS به چند صورت مسدود می شوند:\n از طریق SNI از طریق fingerprint در TLS مسدود سازی TLS به صورت کلی مسدود سازی ارتباط به صورت random  در مورد مسدود سازی ها از طریق fingerprint و مسدود کردن های random، در بخش هایی مجزا توضیح داده خواهد شد. در ادامه به دو مورد ساده تر می پردازیم.\nبررسی ساده ی SNI و TLS #  دسترسی به توییتر را با تنظیم دستی timeout به مدت 30 ثانیه مورد آزمایش قرار می دهیم:\n$ curl -v -m 30 --doh-url https://mozilla.cloudflare-dns.com/dns-query https://twitter.com/ \n  در اینجا می بینیم که بعد از Client hello و بعد از گذشت 30 ثانیه، با پیام timeout ارتباط بسته شده است. این به این دلیل است که در این اتفاق احتمالا به دلیل SNI است اما برای اطمینان باید بررسی بیشتر انجام دهیم.\nبرای اینکه ببینیم که آیا سیستم سانسور به نام توییتر در SNI حساس است یا مسئله ی دیگر، باید از IP سایتی که می دانیم فیلتر نیست استفاده کنیم و اما از آدرس توییتر در SNI استفاده کنیم. مانند دستور زیر که از IP ی سایت example.org استفاده کردیم:\n$ curl -v -m30 --resolve 'twitter.com:443:93.184.216.34' https://twitter.com/ \n  به دلیل اینکه پیامدی مشابه داشته، به این نتیجه می رسیم که این مسدود سازی از طریق شناسایی آدرس twitter.com در بخش SNI در Client hello صورت گرفته است.\nاما سیستم سانسور جمهوری اسلامی گاهی رفتاری متفاوت نیز دارد.\nبرای نشان دادن نمونه های بیشتر، این بار آدرس dns.google را امتحان می کنیم:\n$ curl -v -m30 https://dns.google/ \n  همانند قبل ارتباط بعد از Client hello وارد سیاه چاله شده است.\nدر ادامه تست مسدود بودن SNI را انجام می دهیم و از IP ی سایت example.org استفاده می کنیم:\n$ curl -v -m30 --resolve dns.google:443:93.184.216.34 https://dns.google/ \n  در ایجا می بینیم که TLS handshake به صورت کامل انجام شده است. (خطا به خاطر همسان نبودن Certificate ارسالی از سرور و آدرس درخواستی است)\nبنابراین مسدود سازی نمی تواند صرفا به خاطر آدرس dns.google باشد. سوال این است: آیا از هر ارتباط TLS به سمت آدرس 8.8.4.4 جلوگیری می شود؟\nبرای پاسخ به این سوال، این بار از آدرس IP ی dns.google استفاده می کنیم اما از آدرس دامنه ی example.com برای SNI استفاده می کنیم:\n$ curl -v -m30 --resolve example.com:443:8.8.4.4 https://example.com/ \n  در اینجا می بینیم که سیستم سانسور جمهوری اسلامی فقط نسبت به هر ارتباط TLS به این IP حساس است و آدرس دامنه را ملاک قرار نمی دهد.\nالبته این رفتار در همه ی شبکه ها و یا نسبت به همه ی آدرس ها یکسان نیست. به عنوان مثال، تست های بالا را که در مخابرات (AS58224) انجام شده بود را در همراه اول (AS197207) تکرار می کنیم:\n$ curl -v -m30 --resolve dns.google:443:8.8.4.4 https://dns.google/ \n  می بینیم که بعد از به پایان رسیدن TLS Handshake ارتباط وارد سیاه چاله شده است؛ زمانی که ارتباط HTTP شروع می شود. این می تواند به دلیل تاخیر در واکنش سیستم سانسور باشد که اولین بار این رفتار در چین مشاهده شد.\nالبته در اینجا حساسیت فقط به آدرس dns.google نیست. به عنوان مثال در تست بعدی، همانند قبل پیش می رویم و از IP ی سایت example.com استفاده می کنیم. همچنین به دلیل اینکه مسدود شدن ارتباط بعد از TLS Handshake اتفاق افتاده بود، در تست بعدی از -k نیز استفاده می کنیم تا تفاوت certificate با آدرس درخواستی در SNI، باعث پایان یافتن ارتباط قبل از شروع HTTP نشود.\n$ curl -v -m30 -k --resolve dns.google:443:93.184.216.34 https://dns.google/ \n \n  ارتباط مسدود نشده است.\nو در تست بعدی، از IP ی dns.google استفاده می کنیم و SNI را برای example.com در نظر می گیریم:\n$ curl -v -m30 -k --resolve example.com:443:8.8.4.4 https://example.com/ \n  در نتیجه در این شبکه، بعضی از سرویس ها فقط در صورت ای مسدود خواهند شد که هم آدرس در SNI و هم آدرس IP با rule تنظیم شده در سیستم سانسور مطابقت داشته باشند. در مورد این موضوع در بخش مسدود سازی random سرویس ها باز هم توضیح داده خواهد شد.\nتشخیص تحریم از فیلتر #  برای تشخیص اینکه یک ارتباط فیلتر شده است و یا به دلیل تحریم امکان ارتباط با آن وجود ندارد، باید از ارتباط HTTPS استفاده شود. به دلیل اینکه این امکان فراهم می شود تا این بررسی از دستکاری شدن محتوایش در مسیر ارتباط در امان بماند.\nهمچنین طی یک سال اخیر، در اکثر موارد تحریم بدون نمایش خطای HTTP، از ارتباط جلوگیری نشده است. یعنی اگر تحریم صورت گرفته باشد، ما معمولا می توانیم به صورت کامل TCP handshake و TLS handshake داریم.\nبه دلیل سادگی تشخیص تحریم و پیچیدگی فیلتر، بهتر است که از OONI همانطور که توضیح داده شد استفاده کنید. اما اگر به صورت دستی می خواهید این کار را انجام دهید، می توانید ابتدا یک بار آدرس را با استفاده از شبکه ی خود تست کنید و اگر خطای HTTP ی 403 و یا 404 دریافت کردید و اما وقتی از فیلترشکن استفاده می کنید خطایی مشابه دریافت نکردید، این نشان می دهد که ارتباط با ایران تحریم شده است.\nالبته گاهی ممکن است که یک آدرس، هم تحریم و هم فیلتر شود. مانند Firebase :\nدامنه‌ی https://t.co/dJqPfPjT8M از بیخ و بن فیلتر شد؟! 😕@azarijahromi\n\u0026mdash; Shecan | شکن (@shecan_ir) May 21, 2020  "}]